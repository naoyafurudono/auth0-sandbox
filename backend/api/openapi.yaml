openapi: 3.0.0
info:
  title: Auth0 Sandbox API
  version: 1.0.0
  description: Auth0を使用したOIDC認証を実装するバックエンドAPI

servers:
  - url: http://localhost:8080
    description: ローカル開発環境

security:
  - bearerAuth: []

paths:
  /api/v1/users/me:
    get:
      summary: 現在のユーザー情報を取得
      description: Auth0のJWTトークンから取得したユーザーIDに基づいて、ユーザー情報を返す
      operationId: getCurrentUser
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/profile:
    get:
      summary: ユーザープロフィールを取得
      operationId: getUserProfile
      responses:
        '200':
          description: ユーザープロフィール
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: プロフィールが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: ユーザープロフィールを更新
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: 更新されたプロフィール
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/data:
    get:
      summary: ユーザーのアプリケーションデータを取得
      operationId: getUserData
      responses:
        '200':
          description: ユーザーデータのリスト
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: ユーザーデータを作成
      operationId: createUserData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataCreate'
      responses:
        '201':
          description: 作成されたデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Auth0から取得したJWTトークン

  schemas:
    User:
      type: object
      required:
        - id
        - auth0Id
        - email
        - createdAt
      properties:
        id:
          type: string
          description: 内部ユーザーID
        auth0Id:
          type: string
          description: Auth0から取得したユーザーID (sub claim)
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time

    UserProfile:
      type: object
      required:
        - id
        - userId
        - updatedAt
      properties:
        id:
          type: string
        userId:
          type: string
        displayName:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
          format: uri
        updatedAt:
          type: string
          format: date-time

    UserProfileUpdate:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 100
        bio:
          type: string
          maxLength: 500
        avatarUrl:
          type: string
          format: uri

    UserData:
      type: object
      required:
        - id
        - userId
        - content
        - createdAt
      properties:
        id:
          type: string
        userId:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time

    UserDataCreate:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 1000

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        code:
          type: string
